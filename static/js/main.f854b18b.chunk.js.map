{"version":3,"sources":["components/Login.jsx","components/Navbar.jsx","components/TextForm.js","components/About.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Login","react_default","a","createElement","type","name","className","onClick","Navbar","props","concat","mode","dist","to","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","about","href","role","toggleMode","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","onChange","event","target","value","rows","console","log","newText","toUpperCase","showAlert","split","length","About","backgroundColor","border","myStyle","setMyStyle","_useState3","_useState4","btnText","setBtnText","aria-labelledby","data-bs-parent","Alert","capitalize","word","lower","toLowerCase","charAt","slice","alert","msg","defaultProps","App","setMode","setAlert","message","setTimeout","document","body","react_router_dist","exact","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.f854b18b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n//Function Component\r\nexport function Login() {\r\n  return (\r\n    <div>\r\n      UserName:<input type = \"text\" name =\"username\"/>\r\n      Password:<input type=\"password\" name=\"password\"/>\r\n      <button className = \"loginButton\" onClick=\"/home\">Login</button>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <div>\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">{props.about}</Link>\r\n              </li>\r\n              <li className=\"nav-item dropdown\">\r\n                <a className=\"nav-link dropdown-toggle\" href=\"/\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                  Dropdown\r\n                </a>\r\n                <ul className=\"dropdown-menu\">\r\n                  <li><a className=\"dropdown-item\" href=\"/\">Action</a></li>\r\n                  <li><a className=\"dropdown-item\" href=\"/\">Another action</a></li>\r\n                  <li><a className=\"dropdown-item\" href=\"/\">Something else here</a></li>\r\n                </ul>\r\n              </li>\r\n            </ul>\r\n            {/* <form className=\"d-flex\" role=\"search\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n              <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n            </form> */}\r\n            {/* //Template Literal */}\r\n            <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n              <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" onClick={props.toggleMode} id=\"flexSwitchCheckChecked\"/>\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckChecked\">Enable DarkMode</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string,\r\n  about: PropTypes.string.isRequired\r\n}\r\nNavbar.defaultProps = {\r\n  title: 'Set title here',\r\n  about: \"Set About here\"\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUPClick = () => {\r\n        console.log(\"Uppercase was clicked \" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"converted to uppercase\", \"success\");\r\n        //setText(\"you have clicken on handleUPClick\");\r\n    }\r\n\r\n    const handleOnchange = (event) => { // arrow function\r\n        //console.log(\"on change\");\r\n        setText(event.target.value);\r\n    }\r\n    const [text, setText] = useState('Set Text here');\r\n    //text = \"new text\"; // wrong way to change the text\r\n    //setText(\"new text\"); //correct way to change the text using setText\r\n\r\n    // const [wordcount, setWordcount] = useState({});\r\n    // // create array of words\r\n    // const countWord=()=>{\r\n    //     const words = text.split(' ');\r\n    //     let wCount = 0;\r\n    //     words.forEach((word) => {\r\n    //         if (word.trim() !== '') {\r\n    //             wCount++;\r\n    //         }\r\n    //         setWordcount(wCount);\r\n    //     });\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\" style={{ color: props.mode === 'light' ? 'black' : 'white' }}>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" id=\"myText\" onChange={handleOnchange} value={text} rows=\"8\"></textarea>\r\n                </div>\r\n                <button className='btn btn-primary mx-2' onClick={handleUPClick}>Convert Uppercase</button>\r\n                <button className='btn btn-success'>Convert Lowercase</button>\r\n            </div>\r\n            <div className=\"container\" style={{ color: props.mode === 'light' ? 'black' : 'white' }}>\r\n                <h2>Text summary:</h2>\r\n                <p>{text.split(' ').length} words and {text.length} characters</p>\r\n                <p>{0.008 * text.split(' ').length} minute to read a word!</p>\r\n                <h3>Text preview:</h3>\r\n                <p>{text.length > 0 ? text : \"Enter something in the textbox to preview\"}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport default function About() {\r\n \r\n    const [myStyle, setMyStyle] = useState({\r\n        color:'white',\r\n        backgroundColor:'black',\r\n        border:'1px solid white'\r\n    })\r\n    const [btnText, setBtnText] = useState(\"Enable Dark Mode\")\r\n\r\n    const toggleStyle = () =>{\r\n        if(myStyle.color==='black'){\r\n            setMyStyle({\r\n                color:'white',\r\n                backgroundColor:'black',\r\n                border:'1px solid white'\r\n            })\r\n            setBtnText(\"Enable light Mode\")\r\n        } else{\r\n            setMyStyle({\r\n                color:'black',\r\n                backgroundColor:'white'\r\n            })\r\n            setBtnText(\"Enable Dark Mode\")\r\n        }\r\n    }\r\n    return (\r\n        //being a Javascript object, css should be in camel case\r\n        <div className=\"container\" style={myStyle}>\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button className=\"accordion-button\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                            Accordion Item #1\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                            Accordion Item #2\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <button className=\"btn btn-success my-3\" type=\"submit\" onClick={toggleStyle}>{btnText}</button>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize=(word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);//first convert 0th position to capital and then the rest of the string keep as it is.\r\n    }\r\n    return (\r\n        // if props.alert true then the div element will evaluate, if props.alert false then will not check div statement.\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)} : {capitalize(props.alert.msg)}</strong>\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\nimport React, { useState } from 'react';\nimport { Login } from \"./components/Login\";\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport About from './components/About';\nimport Alert from './components/Alert';\nimport { BrowserRouter as Router, Routes, Route, Link } from \"react-router-dom\";\n\n//let name = \"Madhumita\";\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message,type) =>{\n    setAlert({\n      msg: message,\n      type:type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  }\n\n  const toggleMode = ()=>{\n    if(mode==='light'){\n      setMode('dark');\n      document.body.style.backgroundColor='grey';\n      showAlert(\"dark Mode has been Enabled\",\"success\");\n    } else{\n      setMode('light');\n      document.body.style.backgroundColor='white';\n      showAlert(\"light Mode has been Enabled\",\"success\");\n    }\n  }\n\n  return (\n    <>\n      {/* let element = <h1>Hello {name}</h1>; */}\n      {/* <h1>Hello {name}</h1> */}\n      <Router>\n      <Navbar title=\"TextUtils\" about=\"About Us\" mode={mode} toggleMode={toggleMode}/>\n      {/* using container textarea comes in middile.. */}\n      <div className=\"container my-3\">\n      <Alert alert={alert}/>\n      <Routes>\n          <Route exact path=\"/about\" element={<About/>} />\n          <Route exact path=\"/\" element={<TextForm showAlert={showAlert} heading=\"Enter the Text in below:\" mode={mode}/>} />\n      </Routes>\n      </div>\n      <Login />\n      </Router>\n    </>\n  );\n}\n//console.log(name);\n// arrow function\n\n// const App = (as, asa) => {\n//   return (\n//     <>\n//       <ButtonExample/>\n//       <Navigation/>\n//       <Footer/>\n//       <Login/>\n//     </>\n//   );\n// }\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}